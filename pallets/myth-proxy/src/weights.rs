
//! Autogenerated weights for `pallet_myth_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-14, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Nikitas-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --pallet
// pallet_myth_proxy
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template
// ./.maintain/template.hbs
// --output
// pallets/myth-proxy/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_myth_proxy`.
pub trait WeightInfo {
	fn add_proxy() -> Weight;
	fn remove_proxy() -> Weight;
	fn proxy() -> Weight;
	fn approve_proxy_funding() -> Weight;
	fn register_sponsor_agent() -> Weight;
	fn revoke_sponsor_agent() -> Weight;
	fn remove_sponsored_proxy() -> Weight;
	fn cleanup_approvals() -> Weight;
}

/// Weights for `pallet_myth_proxy` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `MythProxy::SponsorshipApprovals` (r:1 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:0)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `MythProxy::Proxies` (r:0 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:0 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `454`
		//  Estimated: `3919`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3919)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn remove_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `3835`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3835)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:0)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `247`
		//  Estimated: `3712`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3712)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:0)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorshipApprovals` (r:0 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:0 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve_proxy_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `3692`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3692)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:0 w:1)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_sponsor_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:1)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::InvalidatedAgents` (r:0 w:1)
	/// Proof: `MythProxy::InvalidatedAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn revoke_sponsor_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `3692`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3692)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn remove_sponsored_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `3835`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3835)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::InvalidatedAgents` (r:2 w:0)
	/// Proof: `MythProxy::InvalidatedAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:2 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorshipApprovals` (r:1 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_approvals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `423`
		//  Estimated: `6363`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 6363)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `MythProxy::SponsorshipApprovals` (r:1 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:0)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `MythProxy::Proxies` (r:0 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:0 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `454`
		//  Estimated: `3919`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3919)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn remove_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `3835`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3835)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:0)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `247`
		//  Estimated: `3712`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3712)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:0)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorshipApprovals` (r:0 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:0 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve_proxy_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `3692`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3692)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:0 w:1)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_sponsor_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `MythProxy::SponsorAgents` (r:1 w:1)
	/// Proof: `MythProxy::SponsorAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::InvalidatedAgents` (r:0 w:1)
	/// Proof: `MythProxy::InvalidatedAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn revoke_sponsor_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `3692`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3692)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::Proxies` (r:1 w:1)
	/// Proof: `MythProxy::Proxies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn remove_sponsored_proxy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `3835`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(28_000_000, 3835)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `MythProxy::InvalidatedAgents` (r:2 w:0)
	/// Proof: `MythProxy::InvalidatedAgents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::ApprovalsByAgent` (r:2 w:1)
	/// Proof: `MythProxy::ApprovalsByAgent` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MythProxy::SponsorshipApprovals` (r:1 w:1)
	/// Proof: `MythProxy::SponsorshipApprovals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_approvals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `423`
		//  Estimated: `6363`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 6363)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
