
//! Autogenerated weights for `pallet_testing_utilities`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-08-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Mikolas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ../../target/release/mythos-node
// benchmark
// pallet
// --pallet
// pallet_testing_utilities
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// src/weights.rs
// --template
// ../../.maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_testing_utilities`.
pub trait WeightInfo {
	fn transfer_through_delayed_remint() -> Weight;
	fn execute_scheduled_transfer() -> Weight;
}

/// Weights for `pallet_testing_utilities` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `TestingUtilities::ScheduledTransfers` (r:1 w:1)
	/// Proof: `TestingUtilities::ScheduledTransfers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn transfer_through_delayed_remint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3581`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TestingUtilities::ScheduledTransfers` (r:2 w:1)
	/// Proof: `TestingUtilities::ScheduledTransfers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn execute_scheduled_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `265`
		//  Estimated: `6076`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(40_000_000, 6076)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `TestingUtilities::ScheduledTransfers` (r:1 w:1)
	/// Proof: `TestingUtilities::ScheduledTransfers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn transfer_through_delayed_remint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3581`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TestingUtilities::ScheduledTransfers` (r:2 w:1)
	/// Proof: `TestingUtilities::ScheduledTransfers` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn execute_scheduled_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `265`
		//  Estimated: `6076`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(40_000_000, 6076)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
